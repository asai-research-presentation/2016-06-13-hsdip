#+title: Evaluation of a Simple, Window-based, Replanning Approach to Plan Optimization
#+author: Masataro Asai
#+include: "head.org"
#+LINK: img file:img/%s
#+LINK: png file:img/%s.png
#+LINK: jpg file:img/%s.jpg

#+BEGIN_outline-text-1
#+BEGIN_CENTER
Shoma Endo, _Masataro Asai_, Alex Fukunaga

University of Tokyo
#+END_CENTER
#+END_outline-text-1

* Satisficing Planning + Online Cost Refinements

[[png:anytime1]]

* Satisficing Planning + Algorithm Switch

[[png:anytime2]]

#+BEGIN_ALIGNRIGHT
+ *Major example: Plan Postprocessing*
#+END_ALIGNRIGHT

* Main Topic of the paper: Plan Postprocessing

[[png:framework]]

* Various Postprocessing Systems

+ Aras (Nakhost and Muller 2010)
  + Action Elimination(*AE*)
  + Plan Neighborhood Graph Search(*PNGS*)
+ Action Dependency (*AD*) (Chrpa, McCluskey and Osborne 2012)
+ Block Deordering (BDPO2) (Siddiqui and Haslum 2013;2015)
+ Anytime Iterative Refinement of Solution (*AIRS*) (Estrem and Krebsbach 2012)

* Two groups of Optimization Algorithms

| <c>                      |   | <c>                    |
| Polytime Optimizer       |   | Search-based Optimizer |
|--------------------------+---+------------------------|
| Based on the direct      |   | Refining a partial     |
| analysis of a given plan |   | segment in a plan      |
|--------------------------+---+------------------------|
|                          |   |                        |
|                          |   |                        |
|                          |   |                        |
|--------------------------+---+------------------------|

** Polytime Optimizers

[[png:polytime]]

** Polytime Optimizers

[[png:polytime2]]

** Two groups of Optimization Algorithms

| <c>                      |   | <c>                    |
| Polytime Optimizer       |   | Search-based Optimizer |
|--------------------------+---+------------------------|
| Based on the direct      |   | Refining a partial     |
| analysis of a given plan |   | segment in a plan      |
|--------------------------+---+------------------------|
| *AE : O(n^2)*            |   |                        |
| *AD : O(n^2)*            |   |                        |
| n: plan length           |   |                        |
|--------------------------+---+------------------------|

** Search-based Optimizers

[[png:search-based]]

** Search-based Optimizers

[[png:search-based2]]

** Two groups of Optimization Algorithms

| <c>                      |   | <c>                    |
| Polytime Optimizer       |   | Search-based Optimizer |
|--------------------------+---+------------------------|
| Based on the direct      |   | Refining a partial     |
| analysis of a given plan |   | segment in a plan      |
|--------------------------+---+------------------------|
| AE : O(n^2)              |   | *PNGS*                 |
| AD : O(n^2)              |   | *AIRS*                 |
| n: plan length           |   | BDPO2                   |
|--------------------------+---+------------------------|

** Search-based Optimizers Taxonomy

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN3

[[png:search-based2]]

#+END_SPAN3
#+BEGIN_SPAN9
|       | Subproblems are based on        | Subproblems are solved with |
|-------+---------------------------------+-----------------------------|
| PNGS  | neighborhood graph              | Blind unit-cost A*          |
|       |                                 | or Backward Breadths First  |
| AIRS  | windows (ordered by Δcost/Δh) | Blind Bidirectional         |
| BDPO2 | windows (block decomposition)   | Admissible A*               |
|       |                                 | or PNGS (layered approach)  |
#+END_SPAN9
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

** Window-based optimization

[[png:window]]

* Open Questions

#+BEGIN_LARGER
*What is the /baseline/ of various search-based optimizers?*
#+END_LARGER

#+BEGIN_ALIGNRIGHT
i.e. Are these */complex/* algorithms necessary?
#+END_ALIGNRIGHT

　

#+BEGIN_LARGER
*How to /combine/ Polytime and Search-based Optimizers?*
#+END_LARGER

#+BEGIN_ALIGNRIGHT
Also, how effective is it to combine them?
#+END_ALIGNRIGHT

* Differences in Search-based Optimizers ☹

|       | Subproblems are based on          | Subproblems are solved with  |
|-------+-----------------------------------+------------------------------|
| PNGS  | *neighborhood graph*              | *Blind* unit-cost A*         |
|       |                                   | or *Backward Breadths First* |
| AIRS  | windows *(ordered by Δcost/Δh)* | *Blind Bidirectional*        |
| BDPO2 | windows *(block deordering)*      | Admissible A*                |
|       |                                   | or *PNGS* (layered approach) |
|-------+-----------------------------------+------------------------------|
|       |                                   |                              |

#+BEGIN_ALIGNRIGHT
*→ The amount of observation from the experiments are limited*
#+END_ALIGNRIGHT

* So...

#+BEGIN_XLARGE
#+BEGIN_CENTER
"Improvements" MUST outperform the simplest baseline
#+END_CENTER
#+END_XLARGE

* /Simplest baseline/ of search-based optimizers : */R-WIN/*

|         | Subproblems are based on        | Subproblems are solved with |
|---------+---------------------------------+-----------------------------|
| PNGS    | neighborhood graph              | Blind unit-cost A*          |
|         |                                 | or Backward Breadths First  |
| AIRS    | windows (ordered by Δcost/Δh) | Blind Bidirectional         |
| BDPO2   | windows (block deordering)      | Admissible A*               |
|         |                                 | or PNGS (layered approach)  |
|---------+---------------------------------+-----------------------------|
| *R-WIN* | *windows* (*random*)            | *Admissible A**             |

* Evaluate them in an "/Equal Condition/"

|         | Subproblems are based on        | Subproblems are solved with |
|---------+---------------------------------+-----------------------------|
| PNGS    | neighborhood graph              | *Admissible A**             |
|         |                                 |                             |
| AIRS    | windows (ordered by Δcost/Δh) | *Admissible A**             |
| BDPO2   | windows (block deordering)      | *Admissible A**             |
|         |                                 |                             |
|---------+---------------------------------+-----------------------------|
| *R-WIN* | *windows* (*random*)            | *Admissible A**             |

* Evaluation

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN6
IPC instances

Optimize the 15 min results of LAMA

Resource 15 min, 2GB

Participants AD, AE, AIRS, PNGS, R-WIN

(BDPO2 is not tested)
#+END_SPAN6
#+BEGIN_SPAN6
|             |            <r> |
| Algorithm   | Harmonic Means |
|             |      of Ratios |
|-------------+----------------|
| LAMA(15min) |           100% |
| LAMA(30min) |              % |
| AE          |              % |
| AD          |              % |
| AIRS        |              % |
| PNGS        |              % |
| R-WIN       |              % |
#+END_SPAN6
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

#+BEGIN_ALIGNRIGHT
　
#+END_ALIGNRIGHT

* Results

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN6
IPC instances

Optimize the 15 min results of LAMA

Resource 15 min, 2GB

Participants AD, AE, AIRS, PNGS, R-WIN

(BDPO2 is not tested)
#+END_SPAN6
#+BEGIN_SPAN6
| Algorithm   | Harmonic Means |
|             |      of Ratios |
|-------------+----------------|
| LAMA(15min) |           100% |
| LAMA(30min) |          99.3% |
| AE          |          98.4% |
| AD          |          97.4% |
| AIRS        |          97.9% |
| PNGS        |          96.0% |
| R-WIN       |        *95.9%* |
#+END_SPAN6
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

#+BEGIN_ALIGNRIGHT
*Complex tweaks did not outperform the simplest variant*
#+END_ALIGNRIGHT

#+BEGIN_NOTE
BDPO2 unconfirmed
#+END_NOTE

* So...

#+BEGIN_XLARGE
#+BEGIN_CENTER
Now let's reliably improve upon the baseline!
#+END_CENTER
#+END_XLARGE

* Improve AIRS to outperform R-WIN

Window priority: Δcost(i,j) / Δh(i,j)

[[png:airs]]

* Improve AIRS to outperform R-WIN

Why we chose AIRS:

#+BEGIN_ALIGNRIGHT
→ Easy to implement, minimum diff from R-WIN
#+END_ALIGNRIGHT

Problem in AIRS:

#+BEGIN_ALIGNRIGHT
Original AIRS is tested only on *small-scale 15-puzzle/grid-pathfinding*

*＜ 0.1 sec replanning time*
#+END_ALIGNRIGHT

* Penalizing the overwrapping region (Original AIRS)




* Few improvements



* Multiple Optimizers

[[png:framework2]]

** Multiple Optimizers

[[png:framework3]]

** Interactions between Polytime and Search-based Optimizers

[[png:framework4]]



