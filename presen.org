#+title: Evaluation of a Simple, Window-based, Replanning Approach to Plan Optimization
#+author: Masataro Asai
#+include: "head.org"
#+LINK: img file:img/%s
#+LINK: png file:img/%s.png
#+LINK: jpg file:img/%s.jpg

#+BEGIN_NOTE
Presentation available on https://guicho271828.github.io/2016-6-13-hsdip/
#+END_NOTE

#+BEGIN_outline-text-1
#+BEGIN_CENTER
Shoma Endo, _Masataro Asai_, Alex Fukunaga

University of Tokyo
#+END_CENTER
#+END_outline-text-1

* Satisficing Planning + Online Cost Refinements

[[png:anytime1]]

* Satisficing Planning + Algorithm Switch

[[png:anytime2]]


* Main Topic of the paper: Plan Postprocessing

[[png:framework]]

* TODO Various Postprocessing Systems

+ Aras (Nakhost and Muller 2010)
  + Action Elimination(*AE*) --- remove trivially redundant actions
  + Plan Neighborhood Graph Search(*PNGS*) --- replan on neighborhood graph
+ Action Dependency (*AD*) (Chrpa, McCluskey and Osborne 2012)
  + Remove actions of inverse effects etc.
+ Block Deordering (BDPO2) (Siddiqui and Haslum 2013;2015)
  + convert the input to partial order blocks, replan each block
+ Anytime Iterative Refinement of Solution (*AIRS*) (Estrem and Krebsbach 2012)

* Two groups of Optimization Algorithms

| <c>                      |   | <c>                         |
| Polytime Optimizer       |   | Search-based Optimizer      |
|--------------------------+---+-----------------------------|
| Based on the direct      |   | External solver refines     |
| analysis of a given plan |   | a partial segment in a plan |
|--------------------------+---+-----------------------------|
|                          |   |                             |
|                          |   |                             |
|                          |   |                             |
|--------------------------+---+-----------------------------|

** Polytime Optimizers

[[png:polytime]]

** Polytime Optimizers

[[png:polytime2]]

** Two groups of Optimization Algorithms

| <c>                      |   | <c>                         |
| Polytime Optimizer       |   | Search-based Optimizer      |
|--------------------------+---+-----------------------------|
| Based on the direct      |   | External solver refines     |
| analysis of a given plan |   | a partial segment in a plan |
|--------------------------+---+-----------------------------|
| *AE : O(n^2)*            |   |                             |
| *AD : O(n^2)*            |   |                             |
| n: plan length           |   |                             |
|--------------------------+---+-----------------------------|

** Search-based Optimizers

[[png:search-based]]

** Search-based Optimizers

[[png:search-based2]]

** Two groups of Optimization Algorithms

| <c>                      |   | <c>                         |
| Polytime Optimizer       |   | Search-based Optimizer      |
|--------------------------+---+-----------------------------|
| Based on the direct      |   | External solver refines     |
| analysis of a given plan |   | a partial segment in a plan |
|--------------------------+---+-----------------------------|
| AE : O(n^2)              |   | *PNGS*                      |
| AD : O(n^2)              |   | *AIRS*                      |
| n: plan length           |   | BDPO2                       |
|--------------------------+---+-----------------------------|

** Search-based Optimizers Taxonomy

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN3

[[png:search-based2]]

#+END_SPAN3
#+BEGIN_SPAN9
|       | Subproblems Generation        | Underlying Solver |
|-------+---------------------------------+-----------------------------|
| PNGS  | neighborhood graph              |                             |
|       | (search space around the plan)  |                             |
| AIRS  | windows (ordered by Δcost/Δh) |                             |
| BDPO2 | windows (block decomposition)   |                             |
|       |                                 |                             |
#+END_SPAN9
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

** Window-based optimization

[[png:window]]

** Search-based Optimizers Taxonomy

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN2

[[png:search-based2]]

#+END_SPAN2
#+BEGIN_SPAN10
|       | Subproblems Generation        | Underlying Solver |
|-------+---------------------------------+-----------------------------|
| PNGS  | neighborhood graph              | Blind unit-cost A*          |
|       | (search space around the plan)  | or Backward Breadths First  |
| AIRS  | windows (ordered by Δcost/Δh) | Blind Bidirectional         |
| BDPO2 | windows (block decomposition)   | Admissible A*               |
|       |                                 | or PNGS (layered approach)  |
#+END_SPAN10
#+END_ROW-FLUID
#+END_CONTAINER-FLUID


* Open Questions

#+BEGIN_LARGER
*What is the /baseline/ of various search-based optimizers?*
#+END_LARGER

#+BEGIN_ALIGNRIGHT
i.e. Are these */complex/* algorithms necessary?
#+END_ALIGNRIGHT

　

#+BEGIN_LARGER
*How to /combine/ Polytime and Search-based Optimizers?*
#+END_LARGER

#+BEGIN_ALIGNRIGHT
Also, how effective is it to combine them?
#+END_ALIGNRIGHT

* Various Minor Differences in Search-based Optimizers ☹

|       | Subproblems Generation          | Underlying Solver  |
|-------+-----------------------------------+------------------------------|
| PNGS  | *neighborhood graph*              | *Blind* unit-cost A*         |
|       | (search space around the plan)    | or *Backward Breadths First* |
| AIRS  | windows *(ordered by Δcost/Δh)* | *Blind Bidirectional*        |
| BDPO2 | windows *(block deordering)*      | Admissible A*                |
|       |                                   | or *PNGS* (layered approach) |
|-------+-----------------------------------+------------------------------|
|       |                                   |                              |

#+BEGIN_ALIGNRIGHT
#+BEGIN_LARGER
*→ Hard to obtain a useful observation from the experiments*
#+END_LARGER
#+END_ALIGNRIGHT

* /Simplest baseline/ of search-based optimizers : */R-WIN/*

|           | Subproblems Generation          | Underlying Solver          |
|-----------+---------------------------------+----------------------------|
| PNGS      | neighborhood graph              | Blind unit-cost A*         |
|           | (search space around the plan)  | or Backward Breadths First |
| AIRS      | windows (ordered by Δcost/Δh) | Blind Bidirectional        |
| BDPO2     | windows (block deordering)      | Admissible A*              |
|           |                                 | or PNGS (layered approach) |
|-----------+---------------------------------+----------------------------|
| */R-WIN/* | *windows* (*random*)            | *Admissible A^＊ + LMcut*  |

* Evaluate them in an "/Equal Condition/"

|       | Subproblems Generation        | Underlying Solver |
|-------+---------------------------------+-----------------------------|
| PNGS  | neighborhood graph              | *Admissible A^＊ + LMcut*   |
|       | (search space around the plan)  |                             |
| AIRS  | windows (ordered by Δcost/Δh) | *Admissible A^＊ + LMcut*   |
| BDPO2 | windows (block deordering)      | *Admissible A^＊ + LMcut*   |
|       |                                 |                             |
|-------+---------------------------------+-----------------------------|
| R-WIN | windows (random)                | *Admissible A^＊ + LMcut*   |

#+BEGIN_ALIGNRIGHT
#+BEGIN_LARGER
*→ Focus on the subproblem generation*
#+END_LARGER
#+END_ALIGNRIGHT

* Evaluation

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN6
39 IPC domains

Optimize the 15 min, 2GB results of LAMA

Resource 15 min, 2GB

Participants AD, AE, AIRS, PNGS, R-WIN

(BDPO2 is not tested)

(AD, AE as a point of reference)
#+END_SPAN6
#+BEGIN_SPAN6
|             |            <r> |
| Algorithm   | Harmonic Means |
|             |      of Ratios |
|-------------+----------------|
| LAMA(15min) |           100% |
| LAMA(30min) |              % |
| AE          |              % |
| AD          |              % |
| AIRS        |              % |
| PNGS        |              % |
| R-WIN       |              % |
#+END_SPAN6
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

#+BEGIN_ALIGNRIGHT
　
#+END_ALIGNRIGHT

* Results

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN6
39 IPC domains

Optimize the 15 min, 2GB results of LAMA

Resource 15 min, 2GB

Participants AD, AE, AIRS, PNGS, R-WIN

(BDPO2 is not tested)

(AD, AE as a point of reference)
#+END_SPAN6
#+BEGIN_SPAN6
| Algorithm   | Harmonic Means |
|             |      of Ratios |
|-------------+----------------|
| LAMA(15min) |           100% |
| LAMA(30min) |          99.3% |
| AE          |          98.4% |
| AD          |          97.4% |
| AIRS        |          97.9% |
| PNGS        |          96.0% |
| R-WIN       |        *95.9%* |
#+END_SPAN6
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

#+BEGIN_ALIGNRIGHT
#+BEGIN_LARGER
*Complex tweaks did not outperform the simplest variant*
#+END_LARGER
#+END_ALIGNRIGHT

* 

#+BEGIN_XLARGE
#+BEGIN_CENTER
☹

Sadly "Improvements" did not outperform the simplest baseline
#+END_CENTER
#+END_XLARGE

* 

#+BEGIN_XLARGE
#+BEGIN_CENTER
☺

Luckily we have a reliable baseline to improve upon!
#+END_CENTER
#+END_XLARGE

* Improve AIRS to outperform R-WIN: */CH-WIN/*

#+BEGIN_LARGER
Why we chose AIRS?

#+BEGIN_ALIGNRIGHT
→ *Easy* to implement, *minimum diff* from R-WIN
#+END_ALIGNRIGHT

Problem in AIRS:

#+BEGIN_CENTER
Original AIRS is tested only on
#+END_CENTER

#+BEGIN_ALIGNRIGHT
*small-scale 15-puzzle/grid-pathfinding*

*＜ 0.1 sec replanning time*
#+END_ALIGNRIGHT
#+END_LARGER

* Window Priority Scheme in AIRS

#+BEGIN_LARGER
Priority: *Δcost(i,j) / Δh(i,j)*
#+END_LARGER

[[png:airs]]

#+BEGIN_ALIGNRIGHT
#+BEGIN_LARGER
Priority seems promising, *but...*
#+END_LARGER
#+END_ALIGNRIGHT

* AIRS Pitfall 1 : Windows may be too long/difficult

[[png:binary-search]]

** AIRS Pitfall 1 : Windows may be too long/difficult

[[png:binary-search2]]

* AIRS Pitfall 2 : Inappropriate Penalty Scheme

[[png:penalty]]

** AIRS Pitfall 2 : Inappropriate Penalty Scheme

 [[png:penalty2]]

* AIRS Pitfall 3 : Overly Complicated → Keep it simple

[[png:toocomplicated]]

* Result

#+BEGIN_LARGER
CH-WIN achieved the *best performance*
#+END_LARGER

| Algorithm           | Harmonic Means |
|                     |      of Ratios |
|---------------------+----------------|
| LAMA(15min)         |           100% |
| LAMA(30min)         |          99.3% |
| AE                  |          98.4% |
| AD                  |          97.4% |
| AIRS                |          97.9% |
| PNGS                |          96.0% |
| R-WIN               |          95.9% |
|---------------------+----------------|
| *CH-WIN (proposed)* |        *93.3%* |

* Open Questions

#+BEGIN_LARGER
+What is the /baseline/ of various search-based optimizers?+
#+END_LARGER

#+BEGIN_ALIGNRIGHT
+i.e. Are these */complex/* algorithms necessary?+ → Simple algorithms perform better
#+END_ALIGNRIGHT

　

#+BEGIN_LARGER
*How to /combine/ Polytime and Search-based Optimizers?*
#+END_LARGER

#+BEGIN_ALIGNRIGHT
Also, how effective is it to combine them?
#+END_ALIGNRIGHT

* Multiple Optimizers

[[png:framework2]]

** Multiple Optimizers

[[png:framework3]]

# ** Polytime + Search-based Optimizers
# 
# [[png:framework4]]

** Iterating Polytime Optimizer

[[png:static/poly]]

#+BEGIN_ALIGNRIGHT
#+BEGIN_LARGER
+ Iterating AE and AD is not effective
+ we can safely assume that we apply them *at most once*
#+END_LARGER
#+END_ALIGNRIGHT

* Polytime + Search-based Result

|                     |      <r> |        <r> |
| /                   |       <> |         <> |
| Algorithm           |          |            |
| /x/                 | /x/ only | AE+AD+ /x/ |
|---------------------+----------+------------|
| LAMA(15min)         |     100% |          - |
| LAMA(30min)         |    99.3% |          - |
| AE                  |    97.4% |            |
| AD                  |    98.4% |            |
| AIRS                |    97.9% |      95.6% |
| PNGS                |    96.0% |      94.4% |
| R-WIN               |    95.9% |      94.0% |
|---------------------+----------+------------|
| *CH-WIN (proposed)* |    93.3% |    *91.8%* |

* Lessons Learned

+ *Avoid* unnecessary complexity
+ *R-WIN*, baseline, outperformed AIRS, PNGS etc.
  + Use the simplest variant as a baseline, improve upon it
+ CH-WIN, an improved AIRS variant, outperformed previous algorithms
+ Reconfirmed poly+search effectiveness

#+BEGIN_CENTER
#+BEGIN_LARGER
Thank you for Listening!
#+END_LARGER
#+END_CENTER

